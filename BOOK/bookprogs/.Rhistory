m=5000
x=as.matrix(read.table("ols_examp.dat")[1:2313,2:10]
y=as.matrix(read.table("ols_examp.dat")[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y ~ x-1))
#Gibbs sampling begins
for(i in 2:m){
#simulate beta from its multivariate normal conditional
b[i,]=pars+t(rnorm(9,mean=0,sd=1))%*%chol(s2[i-1]*xtxi)
#simulate sigma from its inverse gamma distribution
s2[i]=1/rgamma(1,2313/2,.5*t(y-x%*%(b[i,]))%*%(y-x%*%(b[i,])))
#write output to file and screen
write(c(b[i,],s2[i]),file="c:\\ols_examp.out", append=T, ncol=10)
if(i%%50==0){print(c(i,b[i,1],s2[i]))}
}
m=5000
x=as.matrix(read.table("ols_examp.dat")[1:2313,2:10])
x=as.matrix(read.table("olsexamp.dat")[1:2313,2:10])
y=as.matrix(read.table("olsexamp.dat")[1:2313,11])
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y ~ x-1))
for(i in 2:m){
#simulate beta from its multivariate normal conditional
b[i,]=pars+t(rnorm(9,mean=0,sd=1))%*%chol(s2[i-1]*xtxi)
#simulate sigma from its inverse gamma distribution
s2[i]=1/rgamma(1,2313/2,.5*t(y-x%*%(b[i,]))%*%(y-x%*%(b[i,])))
#write output to file and screen
write(c(b[i,],s2[i]),file="c:\\ols_examp.out", append=T, ncol=10)
if(i%%50==0){print(c(i,b[i,1],s2[i]))}
}
for(i in 2:m){
#simulate beta from its multivariate normal conditional
b[i,]=pars+t(rnorm(9,mean=0,sd=1))%*%chol(s2[i-1]*xtxi)
#simulate sigma from its inverse gamma distribution
s2[i]=1/rgamma(1,2313/2,.5*t(y-x%*%(b[i,]))%*%(y-x%*%(b[i,])))
#write output to file and screen
write(c(b[i,],s2[i]),file="ols_examp.out", append=T, ncol=10)
if(i%%50==0){print(c(i,b[i,1],s2[i]))}
}
hist(s2,60)
hist(s2,100)
m=20000
m=20000
x=as.matrix(read.table("olsexamp.dat")[1:2313,2:10]
y=as.matrix(read.table("olsexamp.dat")[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y[,1] ~ x-1))
#simulate sigma from its inverse gamma marginal
s2=1/rgamma(m,(2313-9)/2,.5*t(residuals(lm(y[,1] ~ x-1)))%*%residuals(lm(y[,1] ~ x-1)))
#simulate beta vector from appropriate mvn
for(i in 1:m)
{
b[i,]=pars+t(rnorm(9,mean=0,sd=1))%*%chol(s2[i]*xtxi)
#write output to file and screen
write(c(b[i,],s2[i]),
file="c:\\ols_examp.out", append=T, ncolumns=10)
if(i%%50==0){print(c(i,b[i,1],s2[i]))}
}
x=as.matrix(read.table("olsexamp.dat")[1:2313,2:10])
y=as.matrix(read.table("olsexamp.dat")[1:2313,11])
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y[,1] ~ x-1))
s2=1/rgamma(m,(2313-9)/2,.5*t(residuals(lm(y[,1] ~ x-1)))%*%residuals(lm(y[,1] ~ x-1)))
for(i in 1:m)
{
b[i,]=pars+t(rnorm(9,mean=0,sd=1))%*%chol(s2[i]*xtxi)
#write output to file and screen
write(c(b[i,],s2[i]),
file="c:\\ols_examp.out", append=T, ncolumns=10)
if(i%%50==0){print(c(i,b[i,1],s2[i]))}
}
for(i in 1:m)
{
b[i,]=pars+t(rnorm(9,mean=0,sd=1))%*%chol(s2[i]*xtxi)
#write output to file and screen
write(c(b[i,],s2[i]),
file="ols_examp.out", append=T, ncolumns=10)
if(i%%50==0){print(c(i,b[i,1],s2[i]))}
}
hist(s2,100)
load("C:/Users/$andu/Google Drive/STUDII/KU/Bayesian Econometrics/Course/Exam/Bayes dividends.RData")
m=20000
load("Bayes dividends.RData")
m=20000
x=as.matrix(read.table("olsexamp.dat")[1:2313,2:10])
?res
#R program for MH sampling of parameters in linear regression
#number of iterations
m=20000
#read in data, establish x and y matrices
x=as.matrix(read.table("olsexamp.dat")[1:2313,2:10])
y=as.matrix(read.table("olsexamp.dat")[1:2313,11])
#establish parameter vectors, proposal scales and acceptance rates
s2=matrix(1,m); b=matrix(0,m,9)
bscale=sqrt(diag(vcov(lm(y~x-1))))*.5
s2scale=sd(residuals(lm(y~x-1))*(2313-1)/(2313-9))*.5
accrate=matrix(0,m,9); s2accrate=matrix(0,m)
#unnormalized posterior distribution function
post<-function(x,y,b,s2){
return((-1157.5*log(s2) + (-.5/s2) * (t(y- x%*%b)%*%(y- x%*%b))))
}
#Begin MH Sampling
for(i in 2:m){
#temporarily set new values of b
b[i,]=b[i-1,]
#update regression parameters
for(j in 1:9){
#generate candidate and assume it will be accepted...
b[i,j]=b[i-1,j]+rnorm(1,mean=0, sd=bscale[j]); acc=1
#...until it is evaluated for rejection
if((post(x,y,b[i,],s2[i-1]) - post(x,y,b[i-1,],s2[i-1]))
<log(runif(1,min=0,max=1)))
{b[i,j]=b[i-1,j]; acc=0}
accrate[i,j]=(accrate[i-1,j]*(i-1)+acc)/i
}
#update s2.  generate candidate and assume accepted
s2[i]=s2[i-1]+rnorm(1,mean=0, sd=s2scale); acc=1
#...until it is evaluated for rejection
if(s2[i]<0 ||
(post(x,y,b[i,],s2[i]) - post(x,y,b[i,],s2[i-1]))
<log(runif(1,min=0,max=1)))
{s2[i]=s2[i-1]; acc=0}
s2accrate[i]=(s2accrate[i-1]*(i-1)+acc)/i
#write output to file and screen
write(c(b[i,],s2[i],accrate[i,],s2accrate[i]),
file="ols_examp.out", append=T, ncolumns=20)
if(i%%10==0){print(c(i,b[i,1],s2[i],accrate[i,1],s2accrate[i]))}
}
View(x)
View(x)
View(y)
View(y)
lm(y~x-1)
vcov(lm(y~x-1))
diag(vcov(lm(y~x-1)))
sqrt(diag(vcov(lm(y~x-1))))
View(bscale)
#R program for MH sampling of parameters in linear regression
#number of iterations
m=20000
#read in data, establish x and y matrices
x=as.matrix(read.table("olsexamp.dat")[1:2313,2:10])
y=as.matrix(read.table("olsexamp.dat")[1:2313,11])
#establish parameter vectors, proposal scales and acceptance rates
s2=matrix(1,m); b=matrix(0,m,9)
bscale=sqrt(diag(vcov(lm(y~x-1))))*.5
bscale
s2scale=sd(residuals(lm(y~x-1))*(2313-1)/(2313-9))*.5
residuals(lm(y~x-1))*(2313-1)/(2313-9)
residuals(lm(y~x-1))*(2313-1)/(2313-9)[:10]
residuals(lm(y~x-1))*(2313-1)/(2313-9)[1:10]
residuals(lm(y~x-1))[:10]*(2313-1)/(2313-9)
residuals(lm(y~x-1))[1:10]*(2313-1)/(2313-9)
?sd
sd(residuals(lm(y~x-1))*(2313-1)/(2313-9))
sd(residuals(lm(y~x-1))*(2313-1)/(2313-9))*0.5
m=20000
#read in data, establish x and y matrices
x=as.matrix(read.table("olsexamp.dat")[1:2313,2:10])
y=as.matrix(read.table("olsexamp.dat")[1:2313,11])
#establish parameter vectors, proposal scales and acceptance rates
s2=matrix(1,m); b=matrix(0,m,9)
bscale=sqrt(diag(vcov(lm(y~x-1))))*.5
s2scale=sd(residuals(lm(y~x-1))*(2313-1)/(2313-9))*.5
accrate=matrix(0,m,9); s2accrate=matrix(0,m)
b
dim(b)
dim(x)
x%*%b
#R program for MH sampling of parameters in linear regression
#number of iterations
m=20000
#read in data, establish x and y matrices
x=as.matrix(read.table("olsexamp.dat")[1:2313,2:10])
y=as.matrix(read.table("olsexamp.dat")[1:2313,11])
#establish parameter vectors, proposal scales and acceptance rates
s2=matrix(1,m); b=matrix(0,m,9)
bscale=sqrt(diag(vcov(lm(y~x-1))))*.5
s2scale=sd(residuals(lm(y~x-1))*(2313-1)/(2313-9))*.5
accrate=matrix(0,m,9); s2accrate=matrix(0,m)
#unnormalized posterior distribution function
post<-function(x,y,b,s2){
return((-1157.5*log(s2) + (-.5/s2) * (t(y- x%*%b)%*%(y- x%*%b))))
}
#Begin MH Sampling
for(i in 2:m){
#temporarily set new values of b
b[i,]=b[i-1,]
#update regression parameters
for(j in 1:9){
#generate candidate and assume it will be accepted...
b[i,j]=b[i-1,j]+rnorm(1,mean=0, sd=bscale[j]); acc=1
#...until it is evaluated for rejection
if((post(x,y,b[i,],s2[i-1]) - post(x,y,b[i-1,],s2[i-1]))
<log(runif(1,min=0,max=1)))
{b[i,j]=b[i-1,j]; acc=0}
accrate[i,j]=(accrate[i-1,j]*(i-1)+acc)/i
}
#update s2.  generate candidate and assume accepted
s2[i]=s2[i-1]+rnorm(1,mean=0, sd=s2scale); acc=1
#...until it is evaluated for rejection
if(s2[i]<0 ||
(post(x,y,b[i,],s2[i]) - post(x,y,b[i,],s2[i-1]))
<log(runif(1,min=0,max=1)))
{s2[i]=s2[i-1]; acc=0}
s2accrate[i]=(s2accrate[i-1]*(i-1)+acc)/i
#write output to file and screen
write(c(b[i,],s2[i],accrate[i,],s2accrate[i]),
file="ols_examp.out", append=T, ncolumns=20)
if(i%%10==0){print(c(i,b[i,1],s2[i],accrate[i,1],s2accrate[i]))}
}
#R program for MH sampling of parameters in linear regression
#number of iterations
m=20000
#read in data, establish x and y matrices
x=as.matrix(read.table("olsexamp.dat")[1:2313,2:10])
y=as.matrix(read.table("olsexamp.dat")[1:2313,11])
#establish parameter vectors, proposal scales and acceptance rates
s2=matrix(1,m); b=matrix(0,m,9)
bscale=sqrt(diag(vcov(lm(y~x-1))))*.5
s2scale=sd(residuals(lm(y~x-1))*(2313-1)/(2313-9))*.5
accrate=matrix(0,m,9); s2accrate=matrix(0,m)
#unnormalized posterior distribution function
post<-function(x,y,b,s2){
return((-1157.5*log(s2) + (-.5/s2) * (t(y- x%*%b)%*%(y- x%*%b))))
}
#Begin MH Sampling
for(i in 2:m){
#temporarily set new values of b
b[i,]=b[i-1,]
#update regression parameters
for(j in 1:9){
#generate candidate and assume it will be accepted...
b[i,j]=b[i-1,j]+rnorm(1,mean=0, sd=bscale[j]); acc=1
#...until it is evaluated for rejection
if((post(x,y,b[i,],s2[i-1]) - post(x,y,b[i-1,],s2[i-1]))
<log(runif(1,min=0,max=1)))
{b[i,j]=b[i-1,j]; acc=0}
accrate[i,j]=(accrate[i-1,j]*(i-1)+acc)/i
}
#update s2.  generate candidate and assume accepted
s2[i]=s2[i-1]+rnorm(1,mean=0, sd=s2scale); acc=1
#...until it is evaluated for rejection
if(s2[i]<0 ||
(post(x,y,b[i,],s2[i]) - post(x,y,b[i,],s2[i-1]))
<log(runif(1,min=0,max=1)))
{s2[i]=s2[i-1]; acc=0}
s2accrate[i]=(s2accrate[i-1]*(i-1)+acc)/i
#write output to file and screen
write(c(b[i,],s2[i],accrate[i,],s2accrate[i]),
file="ols_examp.out", append=T, ncolumns=20)
if(i%%10==0){print(c(i,b[i,1],s2[i],accrate[i,1],s2accrate[i]))}
}
#number of iterations
m=5000
#read only observations with complete information, n=2313
y=as.matrix(read.table("c:\\ols_examp.dat")[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
#number of iterations
m=5000
#read only observations with complete information, n=2313
x=as.matrix(read.table("c:\\ols_examp.dat")[1:2313,2:10]
y=as.matrix(read.table("c:\\ols_examp.dat")[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y ~ x-1))
#number of iterations
m=5000
#read only observations with complete information, n=2313
#read only observations with complete information, n=2313
x=as.matrix(read.table("c:\\ols_examp.dat")[1:2313,2:10]
y=as.matrix(read.table("c:\\ols_examp.dat")[1:2313,11]
#number of iterations
m=5000
#read only observations with complete information, n=2313
x=as.matrix(read.table("c:\\ols_examp.dat")[1:2313,2:10]
y=as.matrix(read.table("c:\\ols_examp.dat")[1:2313,11]
m=5000
#read only observations with complete information, n=2313
x=as.matrix(read.table("ols_examp.dat")[1:2313,2:10]
y=as.matrix(read.table("ols_examp.dat")[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
y=as.matrix(read.table("olsexamp.dat")[1:2313,11]
l
#number of iterations
m=5000
#read only observations with complete information, n=2313
x=as.matrix(read.table("olsexamp.dat"))[1:2313,2:10]
y=as.matrix(read.table("olsexamp.dat"))[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y ~ x-1))
pats
pars
m=5000
#read only observations with complete information, n=2313
x=as.matrix(read.table("olsexamp.dat"))[1:2313,2:10]
y=as.matrix(read.table("olsexamp.dat"))[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y ~ x-1))
#R program for Gibbs sampling from full conditionals in OLS example
#number of iterations
m=5000
#read only observations with complete information, n=2313
x=as.matrix(read.table("olsexamp.dat"))[1:2313,2:10]
y=as.matrix(read.table("olsexamp.dat"))[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y ~ x-1))
#Gibbs sampling begins
for(i in 2:m){
#simulate beta from its multivariate normal conditional
b[i,]=pars+t(rnorm(9,mean=0,sd=1))%*%chol(s2[i-1]*xtxi)
#simulate sigma from its inverse gamma distribution
s2[i]=1/rgamma(1,2313/2,.5*t(y-x%*%(b[i,]))%*%(y-x%*%(b[i,])))
#write output to file and screen
write(c(b[i,],s2[i]),file="c:\\ols_examp.out", append=T, ncol=10)
if(i%%50==0){print(c(i,b[i,1],s2[i]))}
}
#R program for Gibbs sampling from full conditionals in OLS example
#number of iterations
m=5000
#read only observations with complete information, n=2313
x=as.matrix(read.table("olsexamp.dat"))[1:2313,2:10]
y=as.matrix(read.table("olsexamp.dat"))[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y ~ x-1))
#Gibbs sampling begins
for(i in 2:m){
#simulate beta from its multivariate normal conditional
b[i,]=pars+t(rnorm(9,mean=0,sd=1))%*%chol(s2[i-1]*xtxi)
#simulate sigma from its inverse gamma distribution
s2[i]=1/rgamma(1,2313/2,.5*t(y-x%*%(b[i,]))%*%(y-x%*%(b[i,])))
#write output to file and screen
write(c(b[i,],s2[i]),file="ols_examp.out", append=T, ncol=10)
if(i%%50==0){print(c(i,b[i,1],s2[i]))}
}
#R program for Gibbs sampling from full conditionals in OLS example
start.time <- Sys.time()
#number of iterations
m=5000
#read only observations with complete information, n=2313
x=as.matrix(read.table("olsexamp.dat"))[1:2313,2:10]
y=as.matrix(read.table("olsexamp.dat"))[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y ~ x-1))
#Gibbs sampling begins
for(i in 2:m){
#simulate beta from its multivariate normal conditional
b[i,]=pars+t(rnorm(9,mean=0,sd=1))%*%chol(s2[i-1]*xtxi)
#simulate sigma from its inverse gamma distribution
s2[i]=1/rgamma(1,2313/2,.5*t(y-x%*%(b[i,]))%*%(y-x%*%(b[i,])))
#write output to file and screen
write(c(b[i,],s2[i]),file="ols_examp.out", append=T, ncol=10)
if(i%%50==0){print(c(i,b[i,1],s2[i]))}
}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
#number of iterations
m=20000
x=as.matrix(read.table("c:\\ols_examp.dat")[1:2313,2:10]
y=as.matrix(read.table("c:\\ols_examp.dat")[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y[,1] ~ x-1))
m=20000
x=as.matrix(read.table("c:\\ols_examp.dat"))[1:2313,2:10]
y=as.matrix(read.table("c:\\ols_examp.dat"))[1:2313,11]
x=as.matrix(read.table("ols_examp.dat"))[1:2313,2:10]
#number of iterations
m=20000
x=as.matrix(read.table("olsexamp.dat"))[1:2313,2:10]
y=as.matrix(read.table("olsexamp.dat"))[1:2313,11]
#establish parameter vectors and constant quantities
s2=matrix(1,m); b=matrix(0,m,9)
xtxi=solve(t(x)%*%x)
pars=coefficients(lm(y[,1] ~ x-1))
residuals(lm(y[,1] ~ x-1))
residuals(lm(y[,1] ~ x-1))
residuals(lm(y ~ x-1))
residuals(lm(y ~ x-1))[1:10]
#R program for dichotomous probit model
x=as.matrix(read.table("bookdead.dat")[,3:9])
y=as.matrix(read.table("bookdead.dat")[,10])
View(x)
View(x)
?pnorm
-1^0
-1^1
(-1)^1
